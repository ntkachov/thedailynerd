[{"title":"Simple Photo Watch Face","blurb":"<p> So I've released Simple Photo Watch Face after about a month of work. There was quite a bit of work around figuring out and learning the Wear API as well as perfecting the drawing code for the watch face. But overall I have a solid start to my next project.</p>","body":"<p>A few short interesting things to note: </p>\n<p>\nThe wear API communicates over bluetooth, so sending large images can take quite a bit of time. Sending 100KB at a time, the wear API needs to break up any large files into smaller chunks. Meaning sending a 200kb file is the same as sending 2 100kb files. This overhead results in some slow transfers of larger files. Crunching files down to their most necessary sizes is essential. Bitmaps should be compressed down to their target sizes when transferring.</p>\n<p>\nCommunicating between the watch and the phone using data Items is fast, but not instant. Its worth while to kick off any data request to the watch well before you need that data. </p>\n\n<p>The status bar of the watch api doesn't change unless you call super.onVisibilityChanged(). So if switching watch faces keeps the system clock, you forgot to call super.onVisibilityChanged(). </p>\n\n<p> Changing the bounds inside onDraw affects the redraw of the screen. You can prevent certain parts of the screen from being redrawn by changing the bounds inside onDraw. </p> \n\n<p> More to come </p>","tags":"Android wear ","time":1423271742324},{"title":"My phone is not a PC-powerhouse. So don't treat it as one.","blurb":"It's come to my attention that the recent marketing of phone hardware manufactures has infected the applications on my phone. To which I say, realize that my phone is still a phone. It is not a PC, it does not have (effectively) infinite computing time, it does not have an i7, and it can't output the same raw computational power that my desktop can. So treat my phone the way my phone should be treated. As a limited computing platform with severe limitations in the way of computing power and time. ","body":"<p>\nBut Nick, you have 4 cores running at 1.2Ghz each! Yes, but all of those cores are designed for low power consumption. More so, unless you're multi-threading your app properly, chances are what you're actually doing is using 1 core. On top of that, you're using that 1 core to also process XML and turn it into rendered UI. Even then, if you decide to run a Service with your app [A service is a background task in Android], you're running that on that one core as well. Sure, maybe the OS will be smart enough to put that service on a separate core. But you can't count on it. So I would kindly ask you to please optimize your app. </p><p>\n\nOk. So I'll do the classic Memory vs CPU trade off right? I mean you have 2 gigs of ram so its ok! I do have 2 gigs of ram, you are correct. However, I also have 1280x720 px screen. So most of those 2 gigs is taken up by the huge PNGs loaded up by android. As well as cached apps, background processes, and other things I would like to keep running. Also, since I use the same 4 or 5 apps on my phone all the time, I would appreciate if those apps stayed in my cache. \n</p>\n<p>\nSo, how much should I be using? You should be using just enough computation to display your data as fast as possible. No background processes that are pre-fetching data before I even need it, No advanced UI computation and fancy animations with half a textbook of linear algebra to compute vectors. I don't want you bursting my CPU into submission. Because if your burst happens at the same time as the other guys burst, my phone will chug, and I will blame you because your app was the one I was using at the time. \n</p>\n<p>\nWhat about ram? You'll need more megs to keep larger images in memory. So the android recommended 10 megs of ram is probably not going to be enough. So I would say, 10 megabytes multiplied by the DPI scale. The DPI scale is simply my phone's pixel density divided by 160. 160, or MDPI,  is what android considers \"normal\". So my phone, at 320 dpi, would have a DPI scale of 2. So please keep your apps under 20 megabytes of ram on my phone. (Note: Some people don't have nearly as awesome phones so they would appreciate if you keep your app smaller than 20 megs). \n</p>\n<p>\nThanks,<br>\n-Nick\n</p>","tags":"","time":1360596187927},{"title":"What I've found Twitter is good for","blurb":"Twitter has been one of the greatest tools that I have had in helping me develop Ink Over Apps. However, I haven't been using it the way, I believe, Twitter was intended to be used. ","body":"<p>I'm not tweeting about my app. I'm not gathering followers. I'm not trying to engage my users on Twitter. However, All of those \"tweet\" buttons on all of those websites have resulted in Twitter giving me insight to sites, posts, and reviews I would have never found otherwise. </p>\n<p> I would have never known about the italian blog that covered my app (and all of the user feedback in those discussions) had someone not posted about it on twitter. Same with the french blog and the german blog and all of the other ones. </p>\n<p> Twitter wouldn't have been so useful had Google not been cluttered with spam and pirates. When I search for my app on google, aside from a few well known publications talking about my app, the rest of the links are links to piracy sites giving away my app for free. </p> \n<p> I'm not going to cover piracy, which has been talked about ad nauseam elsewhere. But these sites obscure the search results for sites with real and important content about my app. These sites would be impossible to find without Twitter. And, without them, I would not be able to reach out to my users and find meaningful feedback on my app. </p>\n<p> So tweet on good citizens!  <p>\n<p> <a href=\"https://play.google.com/store/apps/details?id=com.ntkachov.penandpaper&hl=en\">In other news, you can check out my app, Ink Over Apps, here!</a></p>","tags":"","time":1355940585896},{"title":"Why don't mobile OSes have built in help features for apps? ","blurb":"Desktop OSes have a help menu prominently in place on every app. Windows even dedicates an entire key to brining up the help section. So why don't any mobile OSes have built in help buttons or frameworks? ","body":"<p> Don't tell me that its because mobile apps need to be intuitive and simple. Thats garbage. The platforms have gotten so advanced that some of the apps for Android are starting to push into desktop territory. Heck, full IDEs exist on Android that let you make Android apps within Android.  </p>\n<p> This functionality has to be documented somewhere right? Well, no. Unless the dev has gone out of their way to put in what amounts to an extra app inside their app, help features for apps are usually a popup dialog with some shoddy written help text detailing the basics of the app.</p>\n<p>It bothers me that the \"no one RTFMs\" has become \"no manual required\" on mobile. I think help menus are just as important for mobile apps as they are for desktop apps. Especially since mobile apps are starting to become more and more fleshed out with serious features which need documentation. Even Googles flagship Drive app has shoddy help. Lets walk through the experience of getting help with Drive.</p>\n<p> I start off where I left off, reading some document. Where is the help button? No where to be found. Its flat out not on this page. I have to back out into the documents list.  Now where is it? I have to click on the 3 little dots on the top right hand corner and only then do I get a button \"Help\". When I click it, it opens up the browser and loads support.google. Not only does it not know I'm on an android device, the entire website is slow and clunky... on my Nexus 7. </p> \n<p> The actual help page for the Google drive is actually really good, but getting what I need is piss slow, stupidly obtuse, and takes far too long. All I wanted was to figure out how to edit a comment.</p>","tags":"","time":1352080645513},{"title":"The Pi Rule of Project Management","blurb":"Software engineers are notoriously bad at estimating how long something takes to build. And anyone that tells you that they are good at estimating is lying or you're giving them work they've already done.","body":"<p> Its built into the nature of the work. A factory can tell you exactly how long it takes to build a stair case. A plumber can tell you exactly how long it takes to put in the pipes. They've done this before, hundreds of times. They have previous point of reference to how long something takes. </p>\n<p> Software is never like this. Software shouldn't be built twice. Ideally, you would reuse code for identical functionality. So when a software engineer tells you \"I've built something like this, it should take 3 months\" what they are really telling you is \"I've built something like this before so I have an idea of how to design it. It will take 9 months and a few days to actually program because I've never written this exact functionality.\" </p>\n<p> Why 9? Because what ever a software engineer tells you, take it, multiply it by Pi, that's more or less your due date. </p> \n<p> Why Pi? I've noticed from my own excursions that things usually take about 3 times longer than I would have hoped. Stuff that looks like it should take a week usually takes 3. This is an empirical number, so there isn't a mathematical reasoning behind this. </p>\n<p> But wait, we haven't accounted for the 0.1415! Thats there because what ever time they told you they would build it, thats their estimate for actually building it. we need to add some time to package it up, ship it, etc. </p>\n<p> So there you have it. When you ask a software engineer how long something takes, multiply it by Pi, thats when you will have it. <p>  ","tags":"none","time":1349370384589},{"title":"How to guide to CS Student Recruiting Events","blurb":"I've seen enough recruiting at my school to get a taste of what works and what doesn't. As a member of my schools ACM chapter, its our job to get the best companies out there to recruit at our school. The best companies want the best people and the best people show up to the best events.\n","body":"<h3> The Goal: </h3> \n<p> The goal of this article is not to gather the most resumes, but to increase the chances that a top-shot engineer is going to end up putting their resume in your pile.\n If all you need is a bunch of poor/average engineers then this method is far too expensive and you're probably better off not hosting an event in the first place. </p>\n\n<h3> TL;DR: </h3>\n<p> I was going to write a TL;DR: but it became too long. Just read the article. </p>\n\n<h3> When: </h3>\n<p> Hold your event around the time of the career fair (provided the school has one) or early in the semester before students exam crunch time happens. </p>\n<p> Most students will actively look for face time opportunities when they can chat with your recruiters for extra brownie points. Mentioning at the career fair of your event is sure to drive traffic to the event, and mentioning the career fair at the event will drive traffic to your booth. Kids will show up to chat some more and make a good impression </p>\n\n<h3> Who: </h3> \n<p><b> <i> Send Engineers! </i></b> Seriously, it takes one to know one and if your engineers aren't at the career fair you're going to miss all the best people.\nI can say from experience that sending just a recruiter looks like a \"participation award\". It says that you showed up for the sake of being there and couldn't be bothered to send someone that works in the field you're recruiting for.\nEngineers are necessary. The best students care more about what kind of work they will be doing than, say, the office snack room.\n Speaking with an Engineer leaves a far more valuable impression and a deeper understanding of the company than talking with just a recruiter. </p>\n\n<p> Furthermore, you will have far more time to chat with individuals at an event than at the career fair. \nIn fact, I've seen quite a few students who will save all of their really important questions for the event and will go to this event <i>just </i> to ask those questions. \nIf engineers are not present at the event then they will leave without talking to you. And I don't blame them, I wouldn't want to interview for a company I know nothing about. </p>\n\n<h3> What: </h3> \n<p> Ok, We got our engineers, our event is on the day of the career fair. Cool. We're all set to go, Now we need to know what to do at this event. <p>\n<p> Events break down into 3 categories. </p>\n<br> -Tech Talks \n<br> -Company Info\n<br> -\"Fun stuff\"  \n\n<h3>Tech Talks:</h3>\n<p> I've found that these events bring in the best people. Anything dealing with hot technologies (Android, iOS, HTML5, Big Data) brings many people eager and willing to learn new things. These events usually don't include too many people who are there just because they want a job at your company, but people who are actively interested in what you do. </p>\n<p> Here's a small sampling of topics that I've seen perform really well: </p>\n<br> -Anything dealing with video games. (This is the #1 cause of people choosing CS as a major) \n<br> -High performance Websites and Optimizing for the web\n<br> -Best Practices for driving traffic to a website\n<br> -Monetizing Websites, Apps, and games\n<br> -Primers, and Getting started guides to Android, iOS, HTML5.\n\n<p> These talks don't have to be long, half an hour is usually good to cover enough material. Also don't skimp on relating your talk to your company. \"We do this at our company\" gives people a good idea of what work your company does. </p>\n\n<h3>Company Info</h3>\n<p> These are any sort of events where you talk about your company, what you do, where you are, what sort of perks you have. I've seen presentations that are slightly more technical and ones that are more social/perks oriented and they gather about the same crowd. \nThe crowd is going to be slightly larger than at the other events. This is to be expected as your event is more general. However, the upside to this is that you will get students that are not just engineers, but also focused on math and research. These events are good for resume collection. Your engineers can talk with people after the event and take resumes as well as anything else. If you need abroad range of people these events are the best for you. <p>\n\n<h3>Hackathons, Competitions, Games aka \"Fun Stuff\" </h3>\n<p> Oh man, do I love these. Seriously they are the best bang for the buck you can get. Not only do they draw huge crowds, last year about 1/4th of our department showed up to a hackathon, but they also bring the best people around. The downside to this is that <i> you must be very active </i>. These are not events where you can put out a box labeled \"resumes\" and expect it to fill up. You must have people at this event that are actively walking around and looking at what people are doing, talking to people, and being social. The people you want will be more focused on what they are doing, than what you are doing.<p>\n<p> At these events you need to be active in recruiting people. Don't wait for people to come to you. You need to scope out the people you want to get in touch with and then schedule an interview with them, then and there. Exchange phone numbers, set up a time and place, and make sure to follow through. </p>\n<p> The best thing about these events is that if you send and engineer, you can look at people's code right as they are writing it, you can see them in action, and in 30 seconds of interactions your engineer can tell you who is good and who is great. Thats 1 night, 30 seconds per person, 1 engineer, and you can find out who the best people are. Good luck getting those results anywhere else.</p>\n\n<h3>Closing Comments:</h3>\n<p> Make like Paula Dean and butter them up. The people you are looking for are being hunted by everyone else. If the job market was better, you could have people run around and jump through hoops to get a job with you. But at this time you need to make it as easy as possible for someone to get through your door while still holding a high bar. It shocks me how many companies expect to hire top CS students without actually doing anything about it. Instead of spending $30,000 on a recruiter, 3 people, $500 of food, and $500 of prizes will net you the best people on campus.<p>\n\n<p> If you wish to get in touch with me to recruit at Umass Amherst (or the 5 College area) you can email me: nick at thedailynerd.com. </p>  \n","tags":"cs recruiting","time":1346097513679},{"title":"Cuss: The Unused CSS Selector Scanner","blurb":"Cuss is a program I wrote to grab all of my silly CSS files and mark which CSS selectors I wasn't using. Usually after I'm done developing my websites I have a bunch of little CSS selectors that I haven't used. Cuss will notify you of all of these. Cuss will work with most css selectors detailed in CSS 3 including more complicated ones like child selectors. \n<br>\n<a  href=\"https://github.com/ntkachov/cuss\" class=\"link\"> If you're interested, heres the github page </a>","body":"","tags":"cuss ","time":1344046474263},{"title":"How I learned to pump out more features with less work. ","blurb":"This summer is the first summer Iâ€™ve spent doing work for someone other than myself. Previous summers, Iâ€™ve simply sat around the house and coded all day on a project I had come up with. But this summer, Iâ€™m part of an Amazon team with a serious spark in their eyes and a healthy appetite for things that need to get done and Iâ€™ve learned from them what the key is to getting things done. ","body":"<p>\nIf youâ€™re reading for quick tips you best read elsewhere. The key to a higher output is not easy and itâ€™s not quick. This is a process that has taken me 3 years of work and has only started to pay off. </p>\n<p>\nImproving my output was a conscious effort that was accomplished a by a few good principles that I focused my efforts on, having highly readable code which requires constant attention to the over-arching design and syntax consistency as well as good naming conventions and adherence to a strict set of rules. And reducing the amount of technical debt and lag that I take on.</p>\n<p>\nWithout always thinking about â€œwhere does this chunk of code fit in within the rest of my control flowâ€ youâ€™re bound to lose focus of what youâ€™re actually doing and start working on tiny details. It doesnâ€™t really matter if this is a for or a while loop, what matters is why are you looping in the first place and is there something you can change that will remove the loop? Sometimes changing one thing earlier in the control flow can reduce the amount of work that you need to do later on. Such as refactoring a series of injections rather than hacking around it all. And all of this is mute without always keeping the bigger picture in mind. </p>\n<p>\nHaving consistent syntax helps when reading code. It reduces complicated blocks of code to an almost visual language. If for loops and if / else always look the same then it becomes much clearer to see what is happening. Simple things like â€œif(isConnectionAlive())â€ vs. â€œif(!isConnectionClosed)â€ (not using negatives where they can be positives) and always using for loops instead of while loops makes following the logic easier. As tempting as it is to use syntactic sugar to make you look smarter, writing clean, clear, and bug free code is far more productive. Itâ€™s because of this, I try to avoid things like the ternary operator now. It lets me see from a distance what Iâ€™ve done and makes it easy for my team mates to see what Iâ€™ve done.\n</p>\n<p>\nNaming is incredibly important. I would rather name my methods stupidly long than to use a confusing name that is going to cause me to scratch my head and go â€œSo what does this do again?â€. Most good text editors and IDEâ€™s have an autocomplete feature which will fill in the name for you so chances are youâ€™ll never have to type it all out. Thereâ€™s no reason to use names that arenâ€™t descriptive. Furthermore, It often becomes useful to abstract entire chunks of logic with a simple name. Sure, maybe I only use this function in one place and it might be unnecessary but having a chunk of logic abstracted into â€œisPlayerInEndGoal()â€ makes it that much easier to see what the program is doing from a grander picture. </p>\n<p>\nI also have my own strict set of rules that I have developed over the years. Simple things like â€œnever use static methods unless they are truly static because they make it harder to mock and testâ€ [1], â€œIf a line appears in more than one place, make it its own functionâ€, â€œIf an object is doing double duty, split it into two objectsâ€. These little rules are just plain old good coding practice. Following them is important no matter how tempting it is to â€œjust paste this one line right hereâ€. </p>\n<p>\nBecause all of this leads into the most important rule and lesson Iâ€™ve learned so far. <b> Never take on any technical debt [2]. Ever. </b> Even though tech debt seems fine for the first few days, after two weeks you now have 2 weeks of bad code that has worked around and thatâ€™s two weeks worth of further debt. I make sure to pay all my debt as fast as a possible can and do everything in my power to avoid it in the first place because I need to be just as productive in a week as I am today. </p>\n<p>\nThis leads me to my final point, lag. Lag is the time that it takes between when I wake up and when I am productive. That time usually spent checking email, reading up on blogs and news. Any sort of self-gratifying-feeling-like-youâ€™re-being-productive-but not-really morning routine that doesnâ€™t involve consumer facing or user enhancing work. Because at the end of the day, the only thing that matters is what the user can use. And if it doesnâ€™t help the user it doesnâ€™t help me. The way I combat this is by making a mental note every night (sometimes a physical one) of what I have accomplished that day, and what I have to accomplish the next. This way when I wake up I donâ€™t have to hunt around for work to do. I have a clear task in mind for this morning. By the time Iâ€™m done with that task, I will have found something else to do, or I will have a better idea of what I have to do for the next day. </p>\n\n<p>Lag also happens when youâ€™re working on any feature or piece that doesnâ€™t need to be worked on. Never write code that you donâ€™t need at this very instant. Because if I donâ€™t need it now, I wonâ€™t need it later. And if I do need it later, Iâ€™ll write it then. The amount of time that can be taken up writing nice-to-have code is infinite. And if it doesnâ€™t impact the user, it doesnâ€™t impact me.</p>\n<p>\nThis truly isnâ€™t something that can be implemented tomorrow and see effects by the end of the week. Until one has their own set of rules, conventions, and everything involving code quality is second nature, one will not see any improvements in their work flow like I have. Only now that Iâ€™ve had the experience to know why good code is important and why good code quality makes for faster programming have I started to see the effects of little tweaks to my routine. Sure I could post about all the minutia like managing object dependencies and how itâ€™s improved my productivity by X% but it wonâ€™t help anyone who hasnâ€™t covered all of the other things that are slowing them down. </p>\n<p>\nAlso, donâ€™t read any â€œproductivity pornâ€ or â€œproductivity porn pornâ€. Seriously, get back to work. \n</p>\n[1] A truly static method (imho) is a function in the mathematical sense. It does not make any assignments, gives the same output for a given input and does not change its input in any way. Think Math.sqrt. <br>\n\n[2] Technical Debt is any time you put off refactoring something or write something with the intention of refactoring it later on. ","tags":"work faster","time":1343890131223},{"title":"Contact Me","blurb":"Sometimes, people want to get in touch. So heres some contact info.","body":"<h3> Nick Tkachov </h3>\n<br>\n<h3> nick at thedailynerd.com </h3>\n<br><br>\n<p> I do apologize for not linking directly or including the @. But you have to understand that this is just a small step to preventing mass spam from flooding my inbox. </p>\n","tags":"contact me","time":1343180354431},{"title":"Native, Web-views, and Hybridizing.","blurb":"There is no one way to build a good app, but there are painful ways and there are easy ways. WebViews and Web apps are fantastic ways to quickly build cross platform apps but can be slow and clunky. Native apps prove to be difficult to maintain across versions. Hybridizing seems to be the way to go.","body":"<p> Heres what I've found from trying out some hybrid techniques for android. </p>\n<h3> JavaScript for view control, Native for data </h3>\n<p> Facebook famously moved their entire app from webviews to native after customer complaints about their app running slowly. While I have no knowledge of how they were running their application, I can say that from my experience purely JavaScript apps don't work. You need to at least move the data collection and network to the native code. This doesn't make it nearly as portable but the speed increase of native over JavaScript  is worth the extra effort.</p>\n\n<p> <a href = \"http://developer.android.com/guide/webapps/webview.html#UsingJavaScript\">Android allows you to make JavaScript calls directly to Java. </a> Using this makes for much cleaner JavaScript code and allows for Java to handle heavy lifting like netcode and image processing. </p>\n\n<h3> HTML for complex layouts </h3> \n<p>What I'm sticking with for now is to use HTML for complex layouts and use native Java for view control and data processing. This, so far, has been the most successful practice because it allows me to avoid copious amounts of XML and android style layouts while still being able to create and construct layouts of  varying complexity. I've found that using this delegation, it becomes possible to have views that all function independently of one another creating module layouts much cleaner.</p>\n<p>\nThe gist of this technique is to create a new WebView for each major component of the UI and inject the HTML into the WebView. The HTML can be completely self-contained and have its own navigation without the need to create the navigation using Android's APIs.\nI try to avoid heavy JavaScript inside these WebViews except for some animations and event firing.</p> \n\n<p> This technique works wonders for \"shotgun UI\" or lots of small little pieces of UI all stuck together. Android requires far more code per piece of UI than HTML and for lots of little trinkets and buttons  HTML becomes a life saver. </p>\n\nMore on this as it develops.","tags":"Android","time":1342387641012},{"blurb":"If you tell some poor nerd \"its OK to be weird, it gets better in a few years\" that doesn't change the fact that, for a 14 yo kid, graduation and college seems like a life-time away. But we can do better than \"oh woe is me\". High school doesn't have to be a drag.","body":"</p><p>\nBut lets be honest, being the odd man out has some perks, as long as you use them to your advantage. \n</p><p>\nFirst, you have no social life. GREAT! Use that free time for something worth while. Learn to program, learn to draw, learn to play video games better and then start a hit online series.  Don't wallow in pity. Get out there and start to do things.\n</p><p>\nOh, lets not forget, no one likes you. Wonderful! So we have nothing to lose. Go out and talk to people. Specifically, who ever you are interested in. That cute girl/boy across from you in biology. Ya. That one. Go ask them out. Whats the worst that could happen? Seriously, learning to talk to people in high school will make you much better off when college starts. Also read \"How to Win Friends and Influence People\" by Dale Carnegie. It will make your life much easier in college and may win you some good friend from high school. Because, who knows, maybe they'll say yes.\n</p><p>\nNext, To all those jerks who keep calling you names, one medium cafe late, extra cream.\n</p><p> Of those people who were making a fool of me in high school, are now making a fool of themselves in college. \"You majored in political science, and your qualifications include, 'Associate' at 'Nick's Coffee and Tea'\" I can imagine their future employers saying, \"Ya, I think we will stick with the guy that did a semester in the senators office\". Their habits in high school of not embracing diversity never offered them the perspective they needed to understand what other people were doing and what their competition looks like. Now, they are stuck because that one nerd from high school, who would spend hours in the debate classroom, who looked so stupid back then, just snagged a job from them. It's not quite, 'keep your friends close and your enemies closer', it's more about sharing common knowledge. A group of different people, with similar interests, will gather different knowledge and can, as a group, determine the state of affairs better than a single person or a group of similar people can. \n</p><p>\nWhich brings me to my final point, join a community. It doesn't matter what community. Be it a Minecraft server, some sub-reddit with a few thousand people, or local, join something. Get out there and expand your own horizons. If you are one of the lucky kids with parent that let you out of the house, go and visit conventions. Otherwise, be a part of something online. It doesn't matter what the community is, how it is structured, or who's in it. As long as its not a single homogeneous body, its good enough.\n\ntl;dr: Get a hobby, Talk to people. </p>","tags":"","time":1335291390807,"title":"High school doesn't have to suck if you're weird. "}]
